import { setStatusBarHidden } from 'expo-status-bar';
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TextInput, TouchableOpacity, Button, Alert,Image } from 'react-native';
import { Dropdown } from 'react-native-element-dropdown';
// import AntDesign from 'react-native-vector-iconsAntDesign';
import { RadioButton } from 'react-native-paper';
import * as SQLite from 'expo-sqlite';
//db creaion
const db = SQLite.openDatabase('db.yz')//Import Library to make a cannon
import ConfettiCannon from 'react-native-confetti-cannon'; // returns Database object




export default WinByWickets = ({ route, navigation }) => {
  const [shoot, setShoot] = useState(false);

  useEffect(() => {
    createTable5();
    //Time out to fire the cannon
    setTimeout(() => {
      setShoot(true);
    }, 1000);
    
  });

  const createTable5 = () => {
    db.transaction(tx => {
      tx.executeSql(
        'CREATE TABLE IF NOT EXISTS result (date TEXT,match_id INTEGER ,team1 TEXT,score1 TEXT,' +
        'team2 TEXT,score2 TEXT,results TEXT)')
    });
  }



  //getting batting & bowling teams data
  const wicket = route.params.wicket;
  console.log("wicket : ", wicket);

  const team = route.params.team;
  console.log("runs made : ", team);

  //  //getting batting & bowling teams data
  //  const lost = route.params.lost;
  //  console.log("lost : ", lost);


  const winwicket = 10 - wicket;

  const score1 = route.params.team1score;
  console.log("team 1runs made : ", score1);

  const score2 = route.params.team2score;
  console.log("team2 runs made : ", score2);

  const bat = route.params.bat;
  console.log("batting : ", bat);

  const bowl = route.params.bowl;
  console.log("bowling : ", bowl);

  var text = team + " win by " + winwicket + " wickets";
  console.log(text);

  db.transaction(tx => {
    tx.executeSql('INSERT INTO result (match_id,team1,score1,' +
      'team2,score2,results) values (?,?,?,?,?,?)', [3, bat, score1, bowl, score2, text],
      (tx, results) => {

        console.log('Results', results.rowsAffected);
        if (results.rowsAffected > 0) {
          console.log('inserted wicket  result  data ');


        }
      },
      (tx, error) => console.log('Error', error))
  });


  return (
    <View style={styles.container}>
    {/*Card to show the Gift*/}
    <View style={styles.cardStyle}>
      <Text style={styles.headingStyle}>
          Congratulations !!
        </Text>
        <View style={styles.circlestyle}>
        <Image style={styles.imagestyle} source = {require('./image/trp.jpeg')} />
        </View>
        <Text style={{ fontSize: 25, fontWeight: 'bold',marginTop:10 }}>{team}</Text>
        <Text style={styles.paragraph}>
        {team} won by {winwicket} wickets.
        </Text>


      </View>
      {/*Cannon which will fire whenever shoot is true*/}
      {shoot ?
        <ConfettiCannon
          count={200} origin={{ x: -10, y: 0 }} fadeOut="true"
        />
        : null
      }
   
  </View>
);
};



const styles = StyleSheet.create({
container: {
  flex : 1,
  backgroundColor:'red'
},
cardStyle: {
  flex:1,
  alignItems: 'center',
  justifyContent: 'center',
  padding: 24,
  backgroundColor: 'white',
},
textLargeStyle: {
  margin: 24,
  fontSize: 40,
  fontWeight: 'bold',
  textAlign: 'center',
  color: 'green',
},
simpleLineStyle: {
  backgroundColor: 'white',
  width: '100%',
  height: 1,
  marginTop:15,
  marginBottom:15,
},
circlestyle: {
  height:200,
  width:200,
  borderRadius:200,
  backgroundColor:'#2bc310',

},
imagestyle: {
    flex: 1,
    width: null,
    height: null,
    borderRadius:200,
    resizeMode: 'contain'
},
headingStyle:{
  margin: 24,
  fontSize: 25,
  fontWeight: 'bold',
  textAlign: 'center',
},
paragraph: {
  marginTop:15,
  fontSize: 18,
  textAlign: 'center',
},


});